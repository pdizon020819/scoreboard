{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["library","add","faEdit","faCheck","faSun","faMoon","App","props","state","home","away","readOnly","icon","light","theme","themeIcon","_click","bind","Theme","this","setState","prevState","type","className","class","onClick","placeholder","Home","value","Away","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAOAA,IAAQC,IAAIC,IAAQC,IAASC,IAAOC,K,IA8GrBC,E,kDAzGb,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACXC,KAAM,EACNC,KAAM,EACNC,UAAU,EACVC,KAAMV,IACNW,OAAO,EACPC,MAAO,aACPC,UAAWX,KAEb,EAAKY,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAZC,E,qDAgBhBE,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAACV,UAAWU,EAAUV,aAClDQ,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAACT,KAAOS,EAAUV,SAAWT,IAASC,U,2BAG/DmB,GACJH,KAAKC,UAAS,SAAAC,GACX,OAAIA,EAAUZ,KAAO,EACZ,CAACA,KAAe,QAATa,EAAiBD,EAAUZ,KAAO,EAAGY,EAAUZ,KAAO,GAG7D,CAACA,KAAe,QAATa,EAAiBD,EAAUZ,KAAO,EAAGY,EAAUZ,KAAO,Q,2BAKvEa,GACHH,KAAKC,UAAS,SAAAC,GACX,OAAIA,EAAUX,KAAO,EACb,CAACA,KAAe,QAATY,EAAiBD,EAAUX,KAAO,EAAGW,EAAUX,KAAO,GAG5D,CAACA,KAAe,QAATY,EAAiBD,EAAUX,KAAO,EAAGW,EAAUX,KAAO,Q,8BAMzES,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAACR,OAAQQ,EAAUR,UAC/CM,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAACP,MAAQO,EAAUR,MAAQ,YAAc,iBACrEM,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAACN,UAAYM,EAAUR,MAAQR,IAASD,U,+BAKnE,OACE,yBAAKmB,UAAU,OACd,yBAAKC,MAAOL,KAAKX,MAAMM,OACrB,yBAAKS,UAAU,QACb,0CAGJ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAiBA,UAAU,mBAAmBX,KAAMO,KAAKX,MAAMO,UAAWU,QAASN,KAAKD,UAI5F,6BACA,6BACA,yBAAKK,UAAU,YACX,8BACE,2BAAOG,YAAY,SAASf,SAAUQ,KAAKX,MAAMG,WACjD,8BACE,kBAAC,IAAD,CAAiBY,UAAU,qBAAqBX,KAAMO,KAAKX,MAAMI,KAAMa,QAASN,KAAKH,WAIzF,8BACE,2BAAOU,YAAY,SAASf,SAAUQ,KAAKX,MAAMG,WACjD,8BACE,kBAAC,IAAD,CAAiBY,UAAU,qBAAqBX,KAAMO,KAAKX,MAAMI,KAAMa,QAASN,KAAKH,YAO7F,yBAAKO,UAAU,qBACb,6BACE,2BAAIJ,KAAKX,MAAMC,MACf,2BAAOa,KAAK,SAASG,QAASN,KAAKQ,KAAKV,KAAKE,KAAM,OAAQS,MAAQ,MACnE,2BAAON,KAAK,SAASG,QAASN,KAAKQ,KAAKV,KAAKE,KAAM,OAAQS,MAAQ,OAGrE,6BACE,2BAAIT,KAAKX,MAAME,MACf,2BAAOY,KAAK,SAASG,QAASN,KAAKU,KAAKZ,KAAKE,KAAM,OAAQS,MAAQ,MACnE,2BAAON,KAAK,SAASG,QAASN,KAAKU,KAAKZ,KAAKE,KAAM,OAAQS,MAAQ,QAKvE,mC,GApGUE,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ec6fada.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faEdit, faCheck, faSun, faMoon } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nlibrary.add(faEdit, faCheck, faSun, faMoon);\n\n\nclass App extends React.Component{\n\n  constructor(props){\n      super(props);\n      this.state = {\n        home: 0,\n        away: 0,\n        readOnly: true,\n        icon: faEdit,\n        light: false,\n        theme: \"light-mode\",\n        themeIcon: faSun,\n      }\n      this._click = this._click.bind(this);\n      this.Theme = this.Theme.bind(this);\n  }\n\n  _click(){\n    this.setState(prevState => ({readOnly: !prevState.readOnly}));\n    this.setState(prevState => ({icon:  prevState.readOnly ? faEdit : faCheck}));\n }\n\n  Home(type){\n   this.setState(prevState => {\n      if (prevState.home > 0){\n        return {home: type === 'add' ? prevState.home + 1: prevState.home - 1}\n      }\n      else{\n        return {home: type === 'add' ? prevState.home + 1: prevState.home = 0}\n      }\n    });\n  }\n\nAway(type){\n  this.setState(prevState => {\n     if (prevState.away > 0){\n      return {away: type === 'add' ? prevState.away + 1: prevState.away - 1}\n     }\n     else{\n       return {away: type === 'add' ? prevState.away + 1: prevState.away = 0}\n     }\n  });\n  }\n\nTheme(){\n  this.setState(prevState => ({light: !prevState.light}));\n  this.setState(prevState => ({theme:  prevState.light ? \"dark-mode\" : \"light-mode\"}))\n  this.setState(prevState => ({themeIcon:  prevState.light ? faMoon : faSun}))\n}\n  \n\n render () {\n   return (\n     <div className=\"App\">\n      <div class={this.state.theme}>\n        <div className=\"head\">\n          <p>Scoreboard</p>\n        </div>\n\n      <nav className='theme'>\n          <div className='toggle-container'>\n            <FontAwesomeIcon className=\"faicons sun moon\" icon={this.state.themeIcon} onClick={this.Theme}></FontAwesomeIcon>\n          </div>\n      </nav>\n\n        <hr/>\n        <br/>\n        <div className=\"teamName\">\n            <form>\n              <input placeholder=\"Team 1\" readOnly={this.state.readOnly}></input>\n              <span>\n                <FontAwesomeIcon className=\"faicons edit check\" icon={this.state.icon} onClick={this._click}></FontAwesomeIcon>\n              </span>\n            </form>\n\n            <form>\n              <input placeholder=\"Team 2\" readOnly={this.state.readOnly}></input>\n              <span>\n                <FontAwesomeIcon className=\"faicons edit check\" icon={this.state.icon} onClick={this._click}></FontAwesomeIcon>\n              </span>\n            </form>\n            \n            \n        </div>\n\n        <div className=\"score scoreHolder\">\n          <div>\n            <p>{this.state.home}</p>\n            <input type=\"button\" onClick={this.Home.bind(this, \"sub\")} value = \"-\"/>\n            <input type=\"button\" onClick={this.Home.bind(this, \"add\")} value = \"+\"/>\n\n          </div>\n          <div>\n            <p>{this.state.away}</p>\n            <input type=\"button\" onClick={this.Away.bind(this, \"sub\")} value = \"-\"/>\n            <input type=\"button\" onClick={this.Away.bind(this, \"add\")} value = \"+\"/>\n\n          </div>\n\n        </div>\n        <hr/>\n      </div>\n      </div>\n   );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}